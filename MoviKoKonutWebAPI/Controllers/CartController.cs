//===============================================================================
// Microsoft patterns & practices
//  Data Access Guide
//===============================================================================
// Copyright © Microsoft Corporation.  All rights reserved.
// This code released under the terms of the 
// Microsoft patterns & practices license (http://dataguidance.codeplex.com/license)
//===============================================================================


namespace MoviKokonutWebAPI.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Net;
    using System.Net.Http;
    using System.Web.Http;
    using AutoMapper;
    using MoviKokonut.Domain.ShoppingCart;
    using MoviKokonutWebAPI.Models;
    using MoviKokonutWebAPI.Resources;
    using MoviKokonut.Repository;

    public class CartController : ApiController
    {
        private IShoppingCartRepository shoppingCartRepository;
        private IProductRepository productRepository;

        public CartController(
            IShoppingCartRepository shoppingCartRepository,
            IProductRepository productRepository)
        {
            this.shoppingCartRepository = shoppingCartRepository;
            this.productRepository = productRepository;
        }

        [HttpGet]
        public HttpResponseMessage Get(string id)
        {
            var shoppingCart = this.shoppingCartRepository.GetShoppingCart(id);
            if (shoppingCart == null)
            {
                return Request.CreateErrorResponse(
                    HttpStatusCode.NotFound, 
                    string.Format(CultureInfo.CurrentCulture, Strings.ShoppingCartNotFoundById, id));
            }

            var cartItems = new List<CartItem>();
            Mapper.Map(shoppingCart.ShoppingCartItems, cartItems);
            
            return Request.CreateResponse(HttpStatusCode.OK, cartItems);
        }

        [HttpPost]
        public HttpResponseMessage Add(CartItem cartItem)
        {
            var returnStatusCode = HttpStatusCode.OK;

            if (cartItem == null)
            {
                return Request.CreateErrorResponse(
                    HttpStatusCode.BadRequest,
                    string.Format(CultureInfo.CurrentCulture, Strings.CartItemCannotBeNull));
            }

            // check that product exists
            if (!this.productRepository.ProductExists(cartItem.ProductId))
            {
                return Request.CreateErrorResponse(
                    HttpStatusCode.BadRequest,
                    string.Format(CultureInfo.CurrentCulture, Strings.ProductNotFoundById, cartItem.ProductId));
            }

            // get the shopping cart (or create a new one if this is the first item)
            var shoppingCart = this.shoppingCartRepository.GetShoppingCart(cartItem.ShoppingCartId);
            if (shoppingCart == null)
            {
                shoppingCart = new ShoppingCart(cartItem.ShoppingCartId);
                returnStatusCode = HttpStatusCode.Created;
            }

            // map from the CartItem DTO to the ShoppingCartItem domain entity
            var shoppingCartItem = new ShoppingCartItem();
            Mapper.Map(cartItem, shoppingCartItem);

            try
            {
                // add the item to the shopping cart
                shoppingCart.AddItem(shoppingCartItem);

                // save the shopping cart to the repository
                this.shoppingCartRepository.SaveShoppingCart(shoppingCart);
                return Request.CreateResponse(returnStatusCode);
            }
            catch (ValidationException valEx)
            {
                // catch any validation exceptions that occur when adding to the collection based on its data annotations
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, valEx.Message);
            }
            catch (Exception ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, new HttpError(ex.Message));
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId = "0", Justification = "This is generated by the ASP.NET WebAPI template.")]
        [HttpDelete]
        public HttpResponseMessage DeleteCartItem(CartItemDelete cartItemDelete)
        {
            var shoppingCart = this.shoppingCartRepository.GetShoppingCart(cartItemDelete.ShoppingCartId);

            if (shoppingCart == null)
            {
                return Request.CreateErrorResponse(
                    HttpStatusCode.NotFound,
                    string.Format(CultureInfo.CurrentCulture, Strings.ShoppingCartNotFoundById, cartItemDelete.ShoppingCartId));
            }

            try
            {
                shoppingCart.RemoveProduct(cartItemDelete.ProductId);
                this.shoppingCartRepository.SaveShoppingCart(shoppingCart);
            }
            catch (Exception ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }

            return Request.CreateResponse(HttpStatusCode.NoContent);
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }
    }
}
